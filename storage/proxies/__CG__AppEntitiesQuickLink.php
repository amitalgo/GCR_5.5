<?php

namespace DoctrineProxies\__CG__\App\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class QuickLink extends \App\Entities\QuickLink implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entities\\QuickLink' . "\0" . 'id', '' . "\0" . 'App\\Entities\\QuickLink' . "\0" . 'mediaUrl', '' . "\0" . 'App\\Entities\\QuickLink' . "\0" . 'mimeType', '' . "\0" . 'App\\Entities\\QuickLink' . "\0" . 'title', '' . "\0" . 'App\\Entities\\QuickLink' . "\0" . 'isActive', '' . "\0" . 'App\\Entities\\QuickLink' . "\0" . 'quickLinkPages', '' . "\0" . 'App\\Entities\\QuickLink' . "\0" . 'createdAt', '' . "\0" . 'App\\Entities\\QuickLink' . "\0" . 'updatedAt'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entities\\QuickLink' . "\0" . 'id', '' . "\0" . 'App\\Entities\\QuickLink' . "\0" . 'mediaUrl', '' . "\0" . 'App\\Entities\\QuickLink' . "\0" . 'mimeType', '' . "\0" . 'App\\Entities\\QuickLink' . "\0" . 'title', '' . "\0" . 'App\\Entities\\QuickLink' . "\0" . 'isActive', '' . "\0" . 'App\\Entities\\QuickLink' . "\0" . 'quickLinkPages', '' . "\0" . 'App\\Entities\\QuickLink' . "\0" . 'createdAt', '' . "\0" . 'App\\Entities\\QuickLink' . "\0" . 'updatedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (QuickLink $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getMediaUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMediaUrl', []);

        return parent::getMediaUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setMediaUrl($mediaUrl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMediaUrl', [$mediaUrl]);

        return parent::setMediaUrl($mediaUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function setMimeType($mimeType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMimeType', [$mimeType]);

        return parent::setMimeType($mimeType);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getQuickLinkPages()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuickLinkPages', []);

        return parent::getQuickLinkPages();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuickLinkPages($quickLinkPages)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuickLinkPages', [$quickLinkPages]);

        return parent::setQuickLinkPages($quickLinkPages);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getisActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getisActive', []);

        return parent::getisActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsActive($isActive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsActive', [$isActive]);

        return parent::setIsActive($isActive);
    }

    /**
     * {@inheritDoc}
     */
    public function addQuickLinkPages(\App\Entities\QuickLinkPage $quickLinkPage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addQuickLinkPages', [$quickLinkPage]);

        return parent::addQuickLinkPages($quickLinkPage);
    }

    /**
     * {@inheritDoc}
     */
    public function getSelectedPages()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSelectedPages', []);

        return parent::getSelectedPages();
    }

    /**
     * {@inheritDoc}
     */
    public function getPages()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPages', []);

        return parent::getPages();
    }

    /**
     * {@inheritDoc}
     */
    public function getFileThumbNail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFileThumbNail', []);

        return parent::getFileThumbNail();
    }

}
